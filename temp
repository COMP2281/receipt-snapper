from PIL import Image
import pytesseract
import numpy as np
import re
import pandas as pd
import platform
import os
import csv
from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="my_geopy_app")
filename = "example_images/image04.png".replace(os.sep, '/')
if platform.system() == "Windows":
    pytesseract.pytesseract.tesseract_cmd = 'C:/Program Files/Tesseract-OCR/tesseract.exe'.replace(os.sep, '/')

img1 = np.array(Image.open(filename))
text = pytesseract.image_to_string(img1)

output_file = "example_ocr_txt/image04.txt".replace(os.sep, '/')

with open(output_file, 'w', encoding='utf-8') as file:
    file.write(text)


date_pattern = re.compile(r'(\d{2})[/.,-](\d{2})[/.,-](\d{4})')
# Check for $/£ 
cost_pattern = re.compile(r'[\£\$\€]\d+(?:\.\d{2})?')
currency_abrvs = ["GBP", "USD"]
address_keywords = ["ROAD", "AVENUE", "CRESCENT", "DRIVE", "LANE", "STREET", "COURT"]
currency = ""
date = ""
amounts = []
date_found = False
cost_found = False
location_found = False
with open(output_file, "r", encoding='utf-8') as file:
    for line in file:
        if date_pattern.search(line):
            date = date_pattern.search(line).group()
            date_found = True
        if cost_pattern.search(line):
            amounts.append(cost_pattern.search(line).group())
            cost_found = True

        for entry in address_keywords:
            if entry in line.upper():
                location = line
                location_found = True

        for symbol in currency_abrvs:
            if symbol in line:
                currency = symbol
        if "£" in line:
            currency = "GBP"
        elif "$" in line:
            currency = "USD"

if location_found:
    if currency == "GBP":
        location = location + ", UK"
    elif currency == "USD":
        location = location + ", USA"

    try:
        location = geolocator.geocode(location, timeout=10000, language = 'en')
    except:
        location = "not found"

    if location == "not found":
        print("failed to find location")

    print(location.address)
    print(location.latitude)
    print(location.longitude)

# placeholder error handling
if not cost_found:
    print("No costs found in the file")

if not date_found:
    print("No date found in the file")
    
def find_highest(arr):
    float_arr = list(map(lambda x: float(x[1:]), arr))
    return max(float_arr)

total_cost = find_highest(amounts)

def reformat_date(string, character):
    return "/".join(string.split(character))

formatted_date = reformat_date(date, date[2])

print(currency)
print(formatted_date)
print(total_cost)

incomplete_df = pd.read_csv("example_expenses/ExpenseReport-RawCardDataOnly.csv".replace(os.sep, '/'), usecols=["Date", "Amount"])

output_file = "matched_data.csv"

# Write header and data
with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    # Header for the output CSV
    writer.writerow([
        "Index", "Date","Category","Description","Detail","Company Paid",
        "Currency Code","Amount","Payment Exchange Rate","Payment Amount",
        "Exchange Override","Expense Location","Total Tax Amount","Net Amount",
        "Project", "Project Name"
    ])
    
    # Iterate through rows in the DataFrame
    for index, row in incomplete_df.iterrows():
        df_date = row["Date"]
        df_price = row["Amount"]
        print(df_date)
        if df_date == formatted_date and df_price == total_cost:
            category = input("""
                            Input the correct category from this list
                            Client Entertainment
                            External Meeting Room Hire
                            Hardware Purchase for Clients
                            "Health & Safety, DSE, Eye Tests"
                            Marketing Costs
                            Networking Events
                            Professional Subscriptions
                            Team Entertainment
                            Training
                            Travel - Air Fare
                            Travel - Bus Fare
                            Travel - Hire Car
                            Travel - Hotel Costs
                            Travel - Meal Costs
                            Travel - Mileage - IE
                            Travel - Mileage - UK
                            Travel - Parking
                            Travel - Rail Travel
                            Travel - Taxi Fare
                            Travel - Toll Charge
                            Waterstons IT Cloud Hosting
                            Waterstons IT Peripherals (Hardware)
                            Waterstons IT Software Subscriptions
                            Waterstons Office Expenses - Australia
                            Waterstons Office Expenses - Durham
                            Waterstons Office Expenses - Glasgow
                            Waterstons Office Expenses - London
                            Waterstons Party
                            """
                             )  # Replace with dropdown menu
            description = input("Please write a short description of the expense.")
            detail = input("(Optional) Enter extra detail about the expense, press Enter to skip")  # Replace with user input
            company_paid = "None"
            amount = df_price
            payment_exchange_rate = "None"
            payment_amount = df_price
            exchange_override = "None"
            expense_location = row["Expense Location"]
            currency_code = row["Currency Code"]
            total_tax_amount = round(df_price - df_price / 1.2, 2)  # Change to check if VAT number present
            net_amount = round(df_price - total_tax_amount, 2)
            project = "Example Project"
            project_name = "Example Project Name"

            # Write the matched row with filled details to CSV
            writer.writerow([
                index, df_date, category, description, detail, 
                company_paid, currency_code, amount, payment_exchange_rate, payment_amount, exchange_override, expense_location, total_tax_amount, net_amount, 
                project, project_name
            ])
